# -*- coding: utf-8 -*-
"""Submission Akhir Pengembangan_Safira Maulidia.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xPG12f3DTTnni3sdQ8RhqlxD8dac3lBB

# Proyek Klasifikasi Gambar: [hand-gesture-recognition-dataset.zip]
- **Nama:** Safira Maulidia
- **Email:** safmaulidia@gmail.com
- **ID Dicoding:** MC288D5X1687

## Import Semua Packages/Library yang Digunakan
"""

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
import matplotlib.pyplot as plt
import os

"""## Data Preparation

### Data Loading
"""

from google.colab import files
files.upload()

!kaggle datasets download -d aryarishabh/hand-gesture-recognition-dataset
!unzip hand-gesture-recognition-dataset.zip

"""### Data Preprocessing

#### Split Dataset
"""

train_dir = 'train/train'
test_dir = 'test/test'

image_size = (128, 128)
batch_size = 32

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=10,
    zoom_range=0.1,
    width_shift_range=0.1,
    height_shift_range=0.1,
    horizontal_flip=True,
    validation_split=0.2
)

val_test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=image_size,
    batch_size=batch_size,
    class_mode='categorical',
    subset='training'
)

val_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=image_size,
    batch_size=batch_size,
    class_mode='categorical',
    subset='validation'
)

test_generator = val_test_datagen.flow_from_directory(
    test_dir,
    target_size=image_size,
    batch_size=batch_size,
    class_mode='categorical'
)

"""## Modelling"""

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)),
    MaxPooling2D(2, 2),

    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),

    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),

    Flatten(),
    Dropout(0.5),
    Dense(128, activation='relu'),
    Dropout(0.3),
    Dense(train_generator.num_classes, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)

history = model.fit(
    train_generator,
    validation_data=val_generator,
    epochs=30,
    callbacks=[early_stop]
)

"""## Evaluasi dan Visualisasi"""

loss, acc = model.evaluate(test_generator)
print('Test accuracy:', acc)

import matplotlib.pyplot as plt

plt.figure(figsize=(12, 4))

plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.grid(True)

plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()

"""## Konversi Model"""

saved_model_dir = 'saved_model/'
tf.saved_model.save(model, saved_model_dir)

import tensorflow as tf

converter = tf.lite.TFLiteConverter.from_saved_model(saved_model_dir)
tflite_model = converter.convert()

with open('model.tflite', 'wb') as f:
    f.write(tflite_model)

!pip install tensorflowjs

!tensorflowjs_converter --input_format=tf_saved_model saved_model/ model_tfjs

print("berhasil di konver ke tfjs")

!pip freeze > requirements.txt

from google.colab import files
files.download('requirements.txt')

"""## Inference (Optional)"""

